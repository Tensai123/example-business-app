terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0"
    }
    azuread = {
      source  = "hashicorp/azuread"
      version = "~> 2.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.4"
    }
  }
}

# Get current Azure AD configuration
data "azurerm_client_config" "current" {}
data "azuread_client_config" "current" {}

# Generate random password for SQL Server
resource "random_password" "sql_admin_password" {
  length  = 24
  special = true
  upper   = true
  lower   = true
  numeric = true

  # Exclude problematic characters for SQL Server
  override_special = "!#$%&*()-_=+[]{}<>:?"
}

# Key Vault
resource "azurerm_key_vault" "main" {
  name                = var.key_vault_name
  location            = var.location
  resource_group_name = var.resource_group_name
  tenant_id           = data.azurerm_client_config.current.tenant_id
  sku_name            = var.key_vault_sku

  # Security settings
  enabled_for_disk_encryption     = var.enable_disk_encryption
  enabled_for_deployment          = var.enable_deployment
  enabled_for_template_deployment = var.enable_template_deployment
  purge_protection_enabled        = var.enable_purge_protection
  soft_delete_retention_days      = var.soft_delete_retention_days

  # Network access rules
  public_network_access_enabled = var.public_network_access_enabled
  
  network_acls {
    default_action = var.default_network_action
    bypass         = "AzureServices"
    
    # Allow access from specific IP ranges
    ip_rules = var.allowed_ip_ranges
  }

  tags = var.common_tags
}

# Access policy for current deployment principal (Terraform/Service Principal)
resource "azurerm_key_vault_access_policy" "terraform_principal" {
  key_vault_id = azurerm_key_vault.main.id
  tenant_id    = data.azurerm_client_config.current.tenant_id
  object_id    = data.azurerm_client_config.current.object_id

  key_permissions = [
    "Create", "Delete", "Get", "List", "Update", "Import", "Backup", "Restore", "Recover",
    "Decrypt", "Encrypt", "Sign", "Verify", "WrapKey", "UnwrapKey", "Purge"
  ]

  secret_permissions = [
    "Get", "List", "Set", "Delete", "Backup", "Restore", "Recover", "Purge"
  ]

  certificate_permissions = [
    "Create", "Delete", "Get", "List", "Update", "Import", "Backup", "Restore", "Recover",
    "ManageContacts", "ManageIssuers", "GetIssuers", "ListIssuers", "SetIssuers", "DeleteIssuers", "Purge"
  ]
}

# Access policy for Key Vault administrators (optional)
resource "azurerm_key_vault_access_policy" "key_vault_admins" {
  count = length(var.admin_object_ids) > 0 ? length(var.admin_object_ids) : 0

  key_vault_id = azurerm_key_vault.main.id
  tenant_id    = data.azurerm_client_config.current.tenant_id
  object_id    = var.admin_object_ids[count.index]

  key_permissions = [
    "Create", "Delete", "Get", "List", "Update", "Import", "Backup", "Restore", "Recover",
    "Decrypt", "Encrypt", "Sign", "Verify", "WrapKey", "UnwrapKey", "Purge"
  ]

  secret_permissions = [
    "Get", "List", "Set", "Delete", "Backup", "Restore", "Recover", "Purge"
  ]

  certificate_permissions = [
    "Create", "Delete", "Get", "List", "Update", "Import", "Backup", "Restore", "Recover",
    "ManageContacts", "ManageIssuers", "GetIssuers", "ListIssuers", "SetIssuers", "DeleteIssuers", "Purge"
  ]
}

# Store SQL Server admin password in Key Vault
resource "azurerm_key_vault_secret" "sql_admin_password" {
  name         = "sql-server-admin-password"
  value        = random_password.sql_admin_password.result
  key_vault_id = azurerm_key_vault.main.id

  tags = merge(var.common_tags, {
    SecretType = "DatabasePassword"
    AutoGenerated = "true"
  })

  depends_on = [azurerm_key_vault_access_policy.terraform_principal]
}

# Store application secrets individually (to avoid for_each with sensitive values)
resource "azurerm_key_vault_secret" "app_insights_connection_string" {
  count = var.app_insights_connection_string != null ? 1 : 0

  name         = "app-insights-connection-string"
  value        = var.app_insights_connection_string
  key_vault_id = azurerm_key_vault.main.id

  tags = merge(var.common_tags, {
    SecretType = "ApplicationSecret"
    Environment = var.environment
  })

  depends_on = [azurerm_key_vault_access_policy.terraform_principal]
}

resource "azurerm_key_vault_secret" "storage_connection_string" {
  count = var.storage_connection_string != null ? 1 : 0

  name         = "storage-connection-string"
  value        = var.storage_connection_string
  key_vault_id = azurerm_key_vault.main.id

  tags = merge(var.common_tags, {
    SecretType = "ApplicationSecret"
    Environment = var.environment
  })

  depends_on = [azurerm_key_vault_access_policy.terraform_principal]
}

resource "azurerm_key_vault_secret" "api_key_external" {
  count = var.api_key_external != null ? 1 : 0

  name         = "api-key-external-service"
  value        = var.api_key_external
  key_vault_id = azurerm_key_vault.main.id

  tags = merge(var.common_tags, {
    SecretType = "ApplicationSecret"
    Environment = var.environment
  })

  depends_on = [azurerm_key_vault_access_policy.terraform_principal]
}